#!/usr/bin/env sh
# SPDX-License-Identifier: GPL-2.0-or-later
# dorun - running desktop applications inside a docker container has never been easier
# https://github.com/gnulinuxid/dorun
# Copyright (c) 2021 nggit.

# see: docker image ls
IMAGE="debian"
# IMAGE="centos"

# default command
CMD="bash"

# --------------
NORMAL="\033[0m"
RED="\033[91m"
GREEN="\033[92m"
YELLOW="\033[93m"

_HOME=$HOME/.dorun
DORUN_CONF_FILE=$_HOME/dorun.conf
XAUTHORITY=${XAUTHORITY:-$HOME/.Xauthority}

# shellcheck disable=SC1090
[ -f "$DORUN_CONF_FILE" ] && [ -r "$DORUN_CONF_FILE" ] && . "$DORUN_CONF_FILE"

containername() {
    printf "dorun_%s" "$( printf "%s" "${1%:latest}" | tr -c 0-9A-Za-z _ )"
}

docreate() {
    if [ "$( id -u )" -eq 0 ]; then
        echo "Untuk menjalankan dorun pertama kali, jangan gunakan root." 1>&2
        exit 1
    fi
    [ -e "$_HOME" ] || mkdir "$_HOME" || exit 1
    if [ ! -e "$DORUN_CONF_FILE" ]; then
        echo "IMAGE=\$IMAGE" > "$DORUN_CONF_FILE"
        echo "CMD=\$CMD" >> "$DORUN_CONF_FILE"
    fi
    XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
    XDG_DOCUMENTS_DIR=$HOME/Documents
    XDG_DOWNLOAD_DIR=$HOME/Downloads
    XDG_MUSIC_DIR=$HOME/Music
    XDG_PICTURES_DIR=$HOME/Pictures
    XDG_TEMPLATES_DIR=$HOME/Templates
    XDG_VIDEOS_DIR=$HOME/Videos
    # shellcheck disable=SC1091
    [ -f "$XDG_CONFIG_HOME/user-dirs.dirs" ] && [ -r "$XDG_CONFIG_HOME/user-dirs.dirs" ] && . "$XDG_CONFIG_HOME/user-dirs.dirs"
    printf "Membuat container %s...\n" "$CONTAINER"
    docker create -it --privileged \
        --entrypoint /usr/bin/env \
        --name "$CONTAINER" \
        --network host \
        -u "$( id -u ):$( id -g )" \
        -v /dev:/dev \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v "$_HOME:$HOME" \
        -v "$HOME/.asoundrc:$HOME/.asoundrc" \
        -v "$XAUTHORITY:$XAUTHORITY" \
        -v "$XDG_DOCUMENTS_DIR:$XDG_DOCUMENTS_DIR" \
        -v "$XDG_DOWNLOAD_DIR:$XDG_DOWNLOAD_DIR" \
        -v "$XDG_MUSIC_DIR:$XDG_MUSIC_DIR" \
        -v "$XDG_PICTURES_DIR:$XDG_PICTURES_DIR" \
        -v "$XDG_TEMPLATES_DIR:$XDG_TEMPLATES_DIR" \
        -v "$XDG_VIDEOS_DIR:$XDG_VIDEOS_DIR" \
        "$IMAGE" sh > /dev/null 2>&1
}

doexec() {
    [ "$( id -u )" -eq 0 ] && printf "%b\n" "${YELLOW}Harap hati-hati. Anda menggunakan hak akses root.$NORMAL"
    # shellcheck disable=SC2046
    docker exec $( [ "$IS_SHELL" -eq 1 ] && printf "%s" "-it" ) --privileged -u "$( id -u ):$( id -g )" \
        "$CONTAINER" \
        sh -c "export DISPLAY=${DISPLAY:-:0}; export HOME=$HOME; export XAUTHORITY=$XAUTHORITY; cd; \
            [ $IS_SHELL -eq 1 ] && [ -f /etc/motd ] && [ -r /etc/motd ] && cat /etc/motd; \
            if command -v ${COMMAND%% *} > /dev/null 2>&1; then $COMMAND; \
            else echo ${COMMAND%% *} tidak ditemukan di $CONTAINER 1>&2; sh; fi \
        "
}

dostart() {
    printf "Memulai container %s...\n" "$CONTAINER"
    docker container start "$CONTAINER" > /dev/null
}

dostop() {
    printf "Menghentikan container %s...\n" "$CONTAINER"
    docker container stop "$CONTAINER" > /dev/null
}

doremove() {
    printf "Menghapus container %s...\n" "$CONTAINER"
    docker container rm "$CONTAINER" > /dev/null
}

show_help() {
    cat << EOF
dorun - https://github.com/gnulinuxid/dorun

Penggunaan:
  dorun [OPT] [ARG...]
  ./dorun [OPT] [ARG...]

OPT:
  --image=IMAGE    opsi ini digunakan untuk mengubah sementara variabel IMAGE
                   tanpa harus mengedit file konfigurasi di $DORUN_CONF_FILE
  -i, --image      mode wizard. menampilkan pilihan IMAGE yang tersedia

ARG...:
  COMMAND          contoh: dorun /dir/prog
                           dorun firefox
                           dorun rofi -show run
                           dorun --image=centos firefox
  -s, --stop       menghentikan container: $CONTAINER
  -c, --clean      membersihkan container: $CONTAINER
  -h, --help       untuk melihat bantuan ini

Tanpa ARG..., dorun akan menjalankan perintah standar yaitu: $CMD
Pastikan program harus sudah terpasang sebelum bisa dijalankan
Anda dapat memasang program dengan masuk ke dorun sebagai root
EOF
}

# -----------
case ${1-} in
    --image=*)
        [ -n "${1##*=}" ] && IMAGE=${1##*=}
        shift
        ;;
    -i|--image)
        i=0; images=
        for image in $( docker image ls --format "{{.Repository}}:{{.Tag}}:{{.ID}}" 2> /dev/null ); do
            image=${image##*<none>:}; image=${image%:*}
            images=${images:+$images,}$image
            container=$( containername "$image" )
            case $( docker container inspect -f "{{.State.Status}}" "$container" 2> /dev/null ) in
                running) containerstatus="${GREEN}berjalan$NORMAL";;
                exited)  containerstatus="${RED}berhenti$NORMAL";;
                *)       container=; containerstatus=;;
            esac
            [ $i -eq 0 ] && printf "%-4s %-30s %-30s %s\n" "NO" "IMAGE" "CONTAINER" "STATUS"
            printf "%-4s %-30s %-30s %b\n" "$(( i += 1 ))." "$image" "$container" "$containerstatus"
        done
        if [ -n "$images" ]; then
            printf "\nSilahkan pilih ( 1 - %s ): " "$i"
            read -r input
            if [ -n "$input" ]; then
                if test "$input" -gt 0 2> /dev/null && [ "$input" -le "$i" ]; then
                    IMAGE=$( echo "$images" | cut -d , -f "$input" )
                else
                    echo "Pilihan salah." 1>&2
                    exit 1
                fi
            else
                echo "Tidak ada yang dipilih." 1>&2
                exit 1
            fi
        fi
        shift
        ;;
esac

if [ $# -gt 0 ]; then
    COMMAND=$*
else
    COMMAND=$CMD
fi

CONTAINER=$( containername "$IMAGE" )

case $( basename -- "${COMMAND%% *}" ) in
    *[a-z]sh|sh)
        IS_SHELL=1
        ;;
    -s|--stop)
        dostop
        exit $?;;
    -c|--clean)
        printf "Apakah anda yakin ingin menghapus %s? ( 1 = Ya, Enter = Tidak ): " "$CONTAINER"
        read -r input
        [ "$input" = 1 ] && dostop && doremove
        exit $?;;
    -h|--help)
        show_help
        exit 0;;
    *)
        IS_SHELL=0
        ;;
esac

case $( docker container inspect -f "{{.State.Status}}" "$CONTAINER" 2> /dev/null ) in
    running) doexec;;
    exited)  dostart && doexec;;
    *)
        if docker image inspect -f "{{.Id}}" "$IMAGE" > /dev/null; then
            docreate && dostart && doexec
        else
            false
        fi
        ;;
esac

exit $?
